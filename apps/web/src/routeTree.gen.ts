/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as TermsImport } from "./routes/terms";
import { Route as ShortenImport } from "./routes/shorten";
import { Route as PrivacyImport } from "./routes/privacy";
import { Route as PricingImport } from "./routes/pricing";
import { Route as IntegrationImport } from "./routes/integration";
import { Route as GenerateImport } from "./routes/generate";
import { Route as FaqsImport } from "./routes/faqs";
import { Route as ContactImport } from "./routes/contact";
import { Route as AuthImport } from "./routes/auth";
import { Route as AuthLayoutImport } from "./routes/_authLayout";
import { Route as IndexImport } from "./routes/index";
import { Route as AuthLayoutSignupImport } from "./routes/_authLayout.signup";
import { Route as AuthLayoutLoginImport } from "./routes/_authLayout.login";
import { Route as DashboardDashboardIndexImport } from "./routes/_dashboard/dashboard/index";
import { Route as DashboardAccountIndexImport } from "./routes/_dashboard/account/index";

// Create Virtual Routes

const AboutLazyImport = createFileRoute("/about")();

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
	path: "/about",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/about.lazy").then((d) => d.Route));

const TermsRoute = TermsImport.update({
	path: "/terms",
	getParentRoute: () => rootRoute,
} as any);

const ShortenRoute = ShortenImport.update({
	path: "/shorten",
	getParentRoute: () => rootRoute,
} as any);

const PrivacyRoute = PrivacyImport.update({
	path: "/privacy",
	getParentRoute: () => rootRoute,
} as any);

const PricingRoute = PricingImport.update({
	path: "/pricing",
	getParentRoute: () => rootRoute,
} as any);

const IntegrationRoute = IntegrationImport.update({
	path: "/integration",
	getParentRoute: () => rootRoute,
} as any);

const GenerateRoute = GenerateImport.update({
	path: "/generate",
	getParentRoute: () => rootRoute,
} as any);

const FaqsRoute = FaqsImport.update({
	path: "/faqs",
	getParentRoute: () => rootRoute,
} as any);

const ContactRoute = ContactImport.update({
	path: "/contact",
	getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
	path: "/auth",
	getParentRoute: () => rootRoute,
} as any);

const AuthLayoutRoute = AuthLayoutImport.update({
	id: "/_authLayout",
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	path: "/",
	getParentRoute: () => rootRoute,
} as any);

const AuthLayoutSignupRoute = AuthLayoutSignupImport.update({
	path: "/signup",
	getParentRoute: () => AuthLayoutRoute,
} as any);

const AuthLayoutLoginRoute = AuthLayoutLoginImport.update({
	path: "/login",
	getParentRoute: () => AuthLayoutRoute,
} as any);

const DashboardDashboardIndexRoute = DashboardDashboardIndexImport.update({
	id: "/_dashboard/dashboard/",
	getParentRoute: () => rootRoute,
} as any);

const DashboardAccountIndexRoute = DashboardAccountIndexImport.update({
	id: "/_dashboard/account/",
	getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		"/_authLayout": {
			preLoaderRoute: typeof AuthLayoutImport;
			parentRoute: typeof rootRoute;
		};
		"/auth": {
			preLoaderRoute: typeof AuthImport;
			parentRoute: typeof rootRoute;
		};
		"/contact": {
			preLoaderRoute: typeof ContactImport;
			parentRoute: typeof rootRoute;
		};
		"/faqs": {
			preLoaderRoute: typeof FaqsImport;
			parentRoute: typeof rootRoute;
		};
		"/generate": {
			preLoaderRoute: typeof GenerateImport;
			parentRoute: typeof rootRoute;
		};
		"/integration": {
			preLoaderRoute: typeof IntegrationImport;
			parentRoute: typeof rootRoute;
		};
		"/pricing": {
			preLoaderRoute: typeof PricingImport;
			parentRoute: typeof rootRoute;
		};
		"/privacy": {
			preLoaderRoute: typeof PrivacyImport;
			parentRoute: typeof rootRoute;
		};
		"/shorten": {
			preLoaderRoute: typeof ShortenImport;
			parentRoute: typeof rootRoute;
		};
		"/terms": {
			preLoaderRoute: typeof TermsImport;
			parentRoute: typeof rootRoute;
		};
		"/about": {
			preLoaderRoute: typeof AboutLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/_authLayout/login": {
			preLoaderRoute: typeof AuthLayoutLoginImport;
			parentRoute: typeof AuthLayoutImport;
		};
		"/_authLayout/signup": {
			preLoaderRoute: typeof AuthLayoutSignupImport;
			parentRoute: typeof AuthLayoutImport;
		};
		"/_dashboard/account/": {
			preLoaderRoute: typeof DashboardAccountIndexImport;
			parentRoute: typeof rootRoute;
		};
		"/_dashboard/dashboard/": {
			preLoaderRoute: typeof DashboardDashboardIndexImport;
			parentRoute: typeof rootRoute;
		};
	}
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
	IndexRoute,
	AuthLayoutRoute.addChildren([AuthLayoutLoginRoute, AuthLayoutSignupRoute]),
	AuthRoute,
	ContactRoute,
	FaqsRoute,
	GenerateRoute,
	IntegrationRoute,
	PricingRoute,
	PrivacyRoute,
	ShortenRoute,
	TermsRoute,
	AboutLazyRoute,
	DashboardAccountIndexRoute,
	DashboardDashboardIndexRoute,
]);

/* prettier-ignore-end */
